#include "stdafx.h"
#include "SoftwareLogin.h"  


bool SLogin::activate(const char* buf) {
    wchar_t key[1024];
    wchar_t ikey[1024];
    swprintf(key, 1024, L"%hs", SLogin::getHashString());
    MultiByteToWideChar(CP_UTF8, 0, buf, 1024, ikey, 1024);
    if (!wcscmp(key, ikey))
        return true;
    return false;
}

// we just need this for purposes of unique machine id. So any one or two mac's is       
// fine. 
uint16_t SLogin::hashMacAddress(PIP_ADAPTER_INFO info)
{
    uint16_t hash = 0;
    for (uint32_t i = 0; i < info->AddressLength; i++)
    {
        hash += (info->Address[i] << ((i & 1) * 8));
    }
    return hash;
}

void SLogin::getMacHash(uint16_t& mac1, uint16_t& mac2)
{
    PIP_ADAPTER_INFO AdapterInfo = new IP_ADAPTER_INFO[32];
    DWORD dwBufLen = sizeof(*AdapterInfo) * 32;

    DWORD dwStatus = GetAdaptersInfo(AdapterInfo, &dwBufLen);
    if (dwStatus != ERROR_SUCCESS)
        return; // no adapters.      

    PIP_ADAPTER_INFO pAdapterInfo = AdapterInfo;
    mac1 = hashMacAddress(pAdapterInfo);
    if (pAdapterInfo->Next)
        mac2 = hashMacAddress(pAdapterInfo->Next);

    // sort the mac addresses. We don't want to invalidate     
    // both macs if they just change order.           
    if (mac1 > mac2)
    {
        uint16_t tmp = mac2;
        mac2 = mac1;
        mac1 = tmp;
    }
    delete[] AdapterInfo;
}

uint16_t SLogin::getVolumeHash()
{
    DWORD serialNum = 0;

    // Determine if this volume uses an NTFS file system.      
    GetVolumeInformationA("C:\\", NULL, 0, &serialNum, NULL, NULL, NULL, 0);
    uint16_t hash = (uint16_t)((serialNum + (serialNum >> 16)) & 0xFFFF);

    return hash;
}

uint16_t SLogin::getCpuHash()
{
    int cpuinfo[4] = { 0, 0, 0, 0 };
    __cpuid(cpuinfo, 0);
    uint16_t hash = 0;
    uint16_t* ptr = (uint16_t*)(&cpuinfo[0]);
    for (uint16_t i = 0; i < 8; i++)
        hash += ptr[i];

    return hash;
}

const char* SLogin::getMachineName()
{
    char computerName[1024];
    static char escapedName[1024];
    DWORD size = 1024;
    GetComputerNameA(computerName, &size);
    for (DWORD i = 0, pos = 0; i < size && computerName[i] != '\0'; i++) {
        if (computerName[i] != '-') {
            escapedName[pos] = computerName[i];
            pos++;
        }
    }
    return &(escapedName[0]);
}

const char* SLogin::getHashString() {
    uint16_t mac1 = 0;
    uint16_t mac2 = 23546;
    static char hash[1024];
    SLogin::getMacHash(mac1, mac2);
    sprintf_s(hash, 1024, "%s-%hu-%hu-%hu-%hu", SLogin::getMachineName(), SLogin::getCpuHash(), SLogin::getVolumeHash(), mac1, mac2);
    return &(hash[0]);
}