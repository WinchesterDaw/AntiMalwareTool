#include "stdafx.h"

wchar_t* OpReg::GetRegistryKeyString(HKEY hOpenKey, LPCWSTR lpSubkey, LPDWORD lpType, void (*logFunc)(LPCWSTR), void (*errFunc)(LPCWSTR)) {
	// 返回一个wchar_t对象，可用delete[]删除喔
	HKEY hKey = (HKEY)INVALID_HANDLE_VALUE;
	const DWORD maxNameSize = 16383l;
	DWORD bufsize = 0l;
	DWORD namesize = maxNameSize;
	LSTATUS retn;
	wchar_t* tmpNameBuf = new wchar_t[maxNameSize]; //写入一次后释放，用于传参
	byte* tmpDataBuf = new byte; //不会写入，用于传参
	retn = RegOpenKeyExW(hOpenKey, lpSubkey, 0, KEY_QUERY_VALUE | KEY_WOW64_64KEY, &hKey);
	if (retn != ERROR_SUCCESS) {
		if (retn != ERROR_FILE_NOT_FOUND) {
			std::wostringstream* wstrerr = new std::wostringstream;
			*wstrerr << L"[-] Error while reading registry " << OpReg::ErrorHandler(retn);
			errFunc(wstrerr->str().c_str());
			delete wstrerr;
		}
		delete[] tmpNameBuf;
		delete tmpDataBuf;
		return NULL;
	}
	retn = RegEnumValueW(hKey, 0, (LPWSTR)tmpNameBuf, &namesize, NULL, lpType, (LPBYTE)tmpDataBuf, &bufsize); //获得Name、Data大小
	delete[] tmpNameBuf;
	delete tmpDataBuf;

	//+1用于存放\0
	namesize++;
	if (retn == ERROR_SUCCESS || retn == ERROR_MORE_DATA) {
		wchar_t* name = new wchar_t[namesize];
		byte* value = new byte[bufsize];
		wchar_t* wvalue = new wchar_t[bufsize];
	
		retn = RegEnumValueW(hKey, 0, (LPWSTR)name, &namesize, NULL, lpType, (LPBYTE)value, &bufsize);
		if (retn != ERROR_SUCCESS) {
			//实时检测错误
			std::wostringstream* wstrerr = new std::wostringstream;
			*wstrerr << L"[-] Error while reading registry " << OpReg::ErrorHandler(retn);
			errFunc(wstrerr->str().c_str());
			delete wstrerr;
			delete[] value;
			delete[] name;
			return NULL;
		}
		RegCloseKey(hKey);

		std::wstring* wvaluestr = new std::wstring((wchar_t*)value, bufsize);
		wcscpy_s(wvalue, bufsize, (*wvaluestr).c_str());
		delete wvaluestr;
		delete[] value;
		delete[] name; //本实例中不需要键名，name字符串仅用于接受RegEnumValueW返回值
		return wvalue;
	}
	else {
		RegCloseKey(hKey);
		std::wostringstream* wstrerr = new std::wostringstream;
		*wstrerr << L"[-] Error while reading registry " << OpReg::ErrorHandler(retn);
		errFunc(wstrerr->str().c_str());
		delete wstrerr;
		return NULL;
	}
}

wchar_t* OpReg::ErrorHandler(LSTATUS error) {
	LPWSTR messageBuffer = nullptr;
	size_t size = FormatMessageW(FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS, NULL, error, MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US), (LPWSTR)&messageBuffer, 0, NULL);
	return messageBuffer;
}